import base64
import io

def save_pdf_from_base64(base64_string, filename="resume.pdf"):
    """
    Decodes a base64 string and saves it as a PDF file, handling potential issues.

    Args:
        base64_string: The base64-encoded PDF data.
        filename: The name of the file to save (default: "resume.pdf").
    """
    if not base64_string:
        print("Error: base64_string is empty.")
        return

    try:
        # 1. Decode the base64 string, handling padding
        missing_padding = len(base64_string) % 4
        if missing_padding:
            base64_string += '=' * (4 - missing_padding)
        pdf_data = base64.b64decode(base64_string)

        # 2. Use io.BytesIO for in-memory file handling (safer)
        pdf_buffer = io.BytesIO(pdf_data)

        # 3. Write the PDF data to a file
        with open(filename, 'wb') as f:
            f.write(pdf_buffer.getvalue())

        print(f"PDF saved successfully to {filename}")

    except base64.binascii.Error as e:
        print(f"Error: Invalid base64 string: {e}")
        print("Please double-check that you copied the ENTIRE base64 string from Postman.")
        return
    except Exception as e:
        print(f"Error saving PDF: {e}")
        return

# Get the base64 string from your Postman output (replace with your actual data)
base64_pdf_data = "JVBERi0xLjQKJZOMi54gUmVwb3J0TGFiIEdlbmVyYXRlZCBQREYgZG9jdW1lbnQgaHR0cDovL3d3dy5yZXBvcnRsYWIuY29tCjEgMCBvYmoKPDwKL0YxIDIgMCBSIC9GMiAzIDAgUgo+PgplbmRvYmoKMiAwIG9iago8PAovQmFzZUZvbnQgL0hlbHZldGljYSAvRW5jb2RpbmcgL1dpbkFuc2lFbmNvZGluZyAvTmFtZSAvRjEgL1N1YnR5cGUgL1R5cGUxIC9UeXBlIC9Gb250Cj4+CmVuZG9iagozIDAgb2JqCjw8Ci9CYXNlRm9udCAvSGVsdmV0aWNhLUJvbGQgL0VuY29kaW5nIC9XaW5BbnNpRW5jb2RpbmcgL05hbWUgL0YyIC9TdWJ0eXBlIC9UeXBlMSAvVHlwZSAvRm9udAo+PgplbmRvYmoKNCAwIG9iago8PAovQ29udGVudHMgOCAwIFIgL01lZGlhQm94IFsgMCAwIDYxMiA3OTIgXSAvUGFyZW50IDcgMCBSIC9SZXNvdXJjZXMgPDwKL0ZvbnQgMSAwIFIgL1Byb2NTZXQgWyAvUERGIC9UZXh0IC9JbWFnZUIgL0ltYWdlQyAvSW1hZ2VJIF0KPj4gL1JvdGF0ZSAwIC9UcmFucyA8PAoKPj4gCiAgL1R5cGUgL1BhZ2UKPj4KZW5kb2JqCjUgMCBvYmoKPDwKL1BhZ2VNb2RlIC9Vc2VOb25lIC9QYWdlcyA3IDAgUiAvVHlwZSAvQ2F0YWxvZwo+PgplbmRvYmoKNiAwIG9iago8PAovQXV0aG9yIChhbm9ueW1vdXMpIC9DcmVhdGlvbkRhdGUgKEQ6MjAyNTA1MDYxODQzMzIrMDUnMDAnKSAvQ3JlYXRvciAoUmVwb3J0TGFiIFBERiBMaWJyYXJ5IC0gd3d3LnJlcG9ydGxhYi5jb20pIC9LZXl3b3JkcyAoKSAvTW9kRGF0ZSAoRDoyMDI1MDUwNjE4NDMzMiswNScwMCcpIC9Qcm9kdWNlciAoUmVwb3J0TGFiIFBERiBMaWJyYXJ5IC0gd3d3LnJlcG9ydGxhYi5jb20pIAogIC9TdWJqZWN0ICh1bnNwZWNpZmllZCkgL1RpdGxlICh1bnRpdGxlZCkgL1RyYXBwZWQgL0ZhbHNlCj4+CmVuZG9iago3IDAgb2JqCjw8Ci9Db3VudCAxIC9LaWRzIFsgNCAwIFIgXSAvVHlwZSAvUGFnZXMKPj4KZW5kb2JqCjggMCBvYmoKPDwKL0ZpbHRlciBbIC9BU0NJSTg1RGVjb2RlIC9GbGF0ZURlY29kZSBdIC9MZW5ndGggMjA0NQo+PgpzdHJlYW0KR2F0PSxEMCtEaiZIOk5uWiFWQiRdYFguOzheYCZLYSNKcCZdRzNOcW9kNCUhL081OklcV1JDbmtDMz8yQTQmbTcnZS4kLyw4PWQ3W0NhYmtPNmYrTjVFPlEiMU90QWhoSGAyI0Y8RmI7ZHFlViEpTTAnRXE+U0M1VDYvZSgzOiEwcmUlIidoUnJcPC9zM0tBZEVaaU5POUV1UVhSLUE5Ly1naVxYSGpFNS5GU3V1TERcMmxAJT1jN0AxWlAmIi51WlBjTktdVUdbJiNOWVhUInNnLGcwLT9NRkBhTDYtbmRTcXUodW1sI186SUYzKytzOWBrOnA7UjloOzVQTDMuR0ssPEA/aylTc11PTT5RXWZVUlIwPi1PY0VwOD9mMEglSmkjXUUwV0dQOVNUVi45Mkg0YVNta2Y1LnVpKyRlWWUxbzFLaVNqNGhVLkcxKFUtbDBkVjguJU9mMS89ZyUlMz84XEomMjo2O0xxcE1eIUVaZ1BmRklUTFAuLmNqR1lgMmdJUCpRXHUpSUpvcSFuYEZJazsyJGYkOkJTSEh1VGJUXShePmRbcmhgTDpmaUYtYSxrIT1BaUgrbipkJDY/QSNrXVlJcSZjSF5raWRaaHQwMV9KZCowVCQkMjc1SDtHKmYnO0RQQ2RTImcsTXE6aDJtNV8iJlRocUBXN0pdRlhSRVE9J1ZQMUJxLVo4WTNETWcqVjtNVTtUcGs/b3BAJDRWNHQ5K2NtX00tKUZbaDEtYUF1O3MxXDZuJUgxI241J1c6PWU7c080KFxqXVtgUnRpYlw5NipCQC88XiQiOik3U0htPSJmV3FGUkhVSUNUJjN0NS9zbzkkK0coZV4vMnAvKFY6YGpDQ1NVRWhJLG1rY0teWChEJz89PXBDOidoXy1nXCh1UGNSVmR1Xy5vcSE9TSJoSjdobFBXZUBELGRLUGhKOF5WYWwnUVskRmpjQVpHI0Q2Q0xmdFtlbFo7WkJFaGRaJWdZUXJ1MTxSLj8nKEdiUStsaUdMY15mTj1McGNaVDRnLFRpLyFwP04jbWQ3VVxcRT1XM1teIiQ4YFU4TmswJjRGLkBeJDk4dVZaMjplTWklIyljcyhDV0MhbFVYSkdCQk05aCYiKzprYDpBPCUpVSt0b1lqN1xxcj1fYm0vKypuayEqMHQ2S1VoWDI2anNhOE90Z0c5Iz4pOEBhUDIlXW1ZZjtXbWVzMmZcQ0p0PClSOiU1PGRtZFxoPThCa2oqTiFVTkhHNEtIczBkXTs0UiNyRkVVayYqWGE8PDsyXTQuV3BcP1wmYjUyND9DUHIvQThpXTpjLC1dKko5WGMqIzNVdCgjZUBRJUdyLTJtSVhMZVMpYWFyZkZKQkIrVSs4STdIJlRta0dbKV08MCtrK0lsN0FSZm5HTSpkQShtYSEpRVInIjQ/ZSVBXERLVFN0bW8qN2VFXUcpVV4oNyZuT1UqYTFDQFhxblZPK21EOF0nKFhFKl9fKVYhdWlzI1hWTWAkNmNuSCVVJC5lSF1TNFcwKj4oQmMmIkIxPWdBQTsiTls7N1QlYFZzVSFXMVk0V09RRi5mPU5tZUZnOmB0dS42YnA5IVlzTy4kJChtSGg4bkdNQE1vJmZEY0tWVCFGXSVaVz5zPiUvazJrJEkqRjYwQU1BIlRJWGI4Qk5oJSxHbjxSTHNmVlVNalFvNDpcaSM8LzRuK2YzbWVeTTdSS0NSMSklQFcwJ0MmampuVTIpXkFUOS9oMS9oSjVBWSY8P0VTaS5lIjdQWS8iI2dDbTtRW3I4QjczPSEtaXFkTC9TU0FrdUAjc1lGJlw/XUtNVktdN3UkXyFyL0JzYjMhYUdAYm9iR1pKXDtKWUteVCglUCg/K2pAKTtVSllUIiVoKDQicy0yZThYQkpgaVtSazlpNEExIklZcSovaVhqXEAnZV8iTlZuZl4vL1dvYTdjKlNDLFRqcVwyQSFqUlZINE8oVWYzV2clR0tjR2RFNHAlOjM7STlKW087Wys9LG0xTGkmL0VpJ09vVFAsRUZkQSRTKFYsSSZjYHRrRC40U10jamxPSHJsSVZWNGcrcG8wSFk1LFtNYEs3PnFtKyFKSD9haE5AKV1Ob25UQFRsajFjLzdaUXQ8VDpKbV5INGBpO2I/aCdKdW9Xa1NDQ3JzSHI5PFBuQEpiTz8zbyVfNihGNl5IWzNvPUQiM19ES2cxS0liRmgyInJHJD11YCpndWVcVFpwQkAsUU9TN1IwQkc5bFMhaGlXWDVcPSJydF5XOGlIU0hkVllhajNYOk9OMWQmKmdDbDRbaUlpbjYzc1hhRWxUK3B1cnNHXEs1UGVcc2NZMm5VXkBSZyJTPDYkJyY1QHB0Rj8sYktsb3IjJCErOS8lVHJxJVhXWl5nUGNtSCUoJVRUPS00PSxbcy01QWtTZCplWHNWL1EuWjFoZ1YtOGU7Ol9RWFpfXV1IK2ZQUE8hRHAmN2JUPS1wX2A/JzlDTW1ORFkmSzJ1PyplQVtLL0NVW243WD9bTmcjOG83TzpZZCZEcWVDK008XUNuPG5lLEhaOWpeSl9UYUclcitHaUs5ZElnbE5oaS5maSInNmNAPUhkYz86JUxEW282RUJpUSFUUTM1cWpySj5lUWBZKk5gcl5HR1VXN0dkY0Y9L1BzV0gpY1w6cV9nXFEpbDJOQWVAWTozNFAlLStJcHBaQS5NQSEnVUNIa2xhcXEmZCE/QyZufj5lbmRzdHJlYW0KZW5kb2JqCnhyZWYKMCA5CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDA3MyAwMDAwMCBuIAowMDAwMDAwMTE0IDAwMDAwIG4gCjAwMDAwMDAyMjEgMDAwMDAgbiAKMDAwMDAwMDMzMyAwMDAwMCBuIAowMDAwMDAwNTI2IDAwMDAwIG4gCjAwMDAwMDA1OTQgMDAwMDAgbiAKMDAwMDAwMDg5MCAwMDAwMCBuIAowMDAwMDAwOTQ5IDAwMDAwIG4gCnRyYWlsZXIKPDwKL0lEIApbPDkxNTExN2RjZWU3M2UwY2RmMjU5NTZmMjE5OWM3YmRiPjw5MTUxMTdkY2VlNzNlMGNkZjI1OTU2ZjIxOTljN2JkYj5dCiUgUmVwb3J0TGFiIGdlbmVyYXRlZCBQREYgZG9jdW1lbnQgLS0gZGlnZXN0IChodHRwOi8vd3d3LnJlcG9ydGxhYi5jb20pCgovSW5mbyA2IDAgUgovUm9vdCA1IDAgUgovU2l6ZSA5Cj4+CnN0YXJ0eHJlZgozMDg1CiUlRU9GCg=="

# Example usage
save_pdf_from_base64(base64_pdf_data)
